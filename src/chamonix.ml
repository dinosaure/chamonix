module Lexer = Lexer

module Parser = struct
  include Parser

  let pp_token ppf = function
    | DOLLAR -> Fmt.string ppf "DOLLAR"
    | BRA -> Fmt.string ppf "BRA"
    | KET -> Fmt.string ppf "KET"
    | MULTIPLY -> Fmt.string ppf "MULTIPLY"
    | PLUS -> Fmt.string ppf "PLUS"
    | MINUS -> Fmt.string ppf "MINUS"
    | DIVIDE -> Fmt.string ppf "DIVIDE"
    | LS -> Fmt.string ppf "LS"
    | ASSIGN -> Fmt.string ppf "ASSIGN"
    | GR -> Fmt.string ppf "GR"
    | DEBUG -> Fmt.string ppf "DEBUG"
    | LEFT_SLICE -> Fmt.string ppf "LEFT_SLICE"
    | RIGHT_SLICE -> Fmt.string ppf "RIGHT_SLICE"
    | NE -> Fmt.string ppf "NE"
    | MULTIPLY_ASSIGN -> Fmt.string ppf "MULTIPLY_ASSIGN"
    | PLUS_ASSIGN -> Fmt.string ppf "PLUS_ASSIGN"
    | MINUS_ASSIGN -> Fmt.string ppf "MINUS_ASSIGN"
    | SLICE_TO -> Fmt.string ppf "SLICE_TO"
    | DIVIDE_ASSIGN -> Fmt.string ppf "DIVIDE_ASSIGN"
    | INSERT -> Fmt.string ppf "INSERT"
    | SLICE_FROM -> Fmt.string ppf "SLICE_FROM"
    | LE -> Fmt.string ppf "LE"
    | EQ -> Fmt.string ppf "EQ"
    | ASSIGN_TO -> Fmt.string ppf "ASSIGN_TO"
    | GE -> Fmt.string ppf "GE"
    | AS -> Fmt.string ppf "AS"
    | DO -> Fmt.string ppf "DO"
    | OR -> Fmt.string ppf "OR"
    | AND -> Fmt.string ppf "AND"
    | FOR -> Fmt.string ppf "FOR"
    | GET -> Fmt.string ppf "GET"
    | HEX -> Fmt.string ppf "HEX"
    | HOP -> Fmt.string ppf "HOP"
    | LEN -> Fmt.string ppf "LEN"
    | NON -> Fmt.string ppf "NON"
    | NOT -> Fmt.string ppf "NOT"
    | SET -> Fmt.string ppf "SET"
    | TRY -> Fmt.string ppf "TRY"
    | FAIL -> Fmt.string ppf "FAIL"
    | GOTO -> Fmt.string ppf "GOTO"
    | LOOP -> Fmt.string ppf "LOOP"
    | NEXT -> Fmt.string ppf "NEXT"
    | SIZE -> Fmt.string ppf "SIZE"
    | TEST -> Fmt.string ppf "TEST"
    | TRUE -> Fmt.string ppf "TRUE"
    | AMONG -> Fmt.string ppf "AMONG"
    | FALSE -> Fmt.string ppf "FALSE"
    | LENOF -> Fmt.string ppf "LENOF"
    | LIMIT -> Fmt.string ppf "LIMIT"
    | UNSET -> Fmt.string ppf "UNSET"
    | ATMARK -> Fmt.string ppf "ATMARK"
    | ATTACH -> Fmt.string ppf "ATTACH"
    | CURSOR -> Fmt.string ppf "CURSOR"
    | DEFINE v -> Fmt.pf ppf "(@[<1>DEFINE@ %s@])" v
    | DELETE -> Fmt.string ppf "DELETE"
    | GOPAST -> Fmt.string ppf "GOPAST"
    | MAXINT -> Fmt.string ppf "MAXINT"
    | MININT -> Fmt.string ppf "MININT"
    | REPEAT -> Fmt.string ppf "REPEAT"
    | SIZEOF -> Fmt.string ppf "SIZEOF"
    | TOMARK -> Fmt.string ppf "TOMARK"
    | ATLEAST -> Fmt.string ppf "ATLEAST"
    | ATLIMIT -> Fmt.string ppf "ATLIMIT"
    | DECIMAL -> Fmt.string ppf "DECIMAL"
    | REVERSE -> Fmt.string ppf "REVERSE"
    | SETMARK -> Fmt.string ppf "SETMARK"
    | STRINGS -> Fmt.string ppf "STRINGS"
    | TOLIMIT -> Fmt.string ppf "TOLIMIT"
    | BOOLEANS -> Fmt.string ppf "BOOLEANS"
    | INTEGERS -> Fmt.string ppf "INTEGERS"
    | ROUTINES -> Fmt.string ppf "ROUTINES"
    | SETLIMIT -> Fmt.string ppf "SETLIMIT"
    | BACKWARDS -> Fmt.string ppf "BACKWARDS"
    | EXTERNALS -> Fmt.string ppf "EXTERNALS"
    | GROUPINGS -> Fmt.string ppf "GROUPINGS"
    | STRINGDEF identifier -> Fmt.pf ppf "(@[<1>STRINGDEF@ %s@])" identifier
    | SUBSTRING -> Fmt.string ppf "SUBSTRING"
    | BACKWARDMODE -> Fmt.string ppf "BACKWARDMODE"
    | NUMBER n -> Fmt.pf ppf "%d" n
    | LITERAL_STRING (_, str) -> Fmt.pf ppf "%S" str
    | NAME name -> Fmt.string ppf name
    | EOF -> Fmt.string ppf "EOF"
end

module Gamma = Gamma
module Program = Program
module Location = Location
module State = State
